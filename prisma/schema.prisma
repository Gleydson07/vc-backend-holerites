generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BatchType {
  HM   @map("hm") // Hora Mensal
  HF   @map("hf") // Hora Fixa
  H13  @map("h13") // Hora 13
  HR   @map("hr") // Hora Reduzida
  HA   @map("ha") // Hora Adicional
  HPLR @map("hplr") // Hora Paga em Lote Reduzido

  @@map("batch_type")
}

enum Recurrence {
  MONTHLY @map("monthly")
  YEARLY  @map("yearly")

  @@map("recurrence")
}

enum PaymentMethod {
  PIX         @map("pix")
  DEBIT_CARD  @map("debit_card")
  CREDIT_CARD @map("credit_card")

  @@map("payment_method")
}

enum PaymentStatus {
  APPROVED @map("approved")
  FAILED   @map("failed")
  PENDING  @map("pending")

  @@map("payment_status")
}

enum SubscriptionStatus {
  ACTIVE    @map("active")
  OVERDUE   @map("overdue")
  CANCELLED @map("cancelled")

  @@map("subscription_status")
}

enum AccessProfile {
  ADMIN    @map("admin")
  MANAGER  @map("manager")
  EMPLOYEE @map("employee")

  @@map("access_profile")
}

model Tenant {
  id         String    @id @default(uuid()) @map("id")
  name       String    @map("name")
  socialName String    @map("social_name")
  cnpj       String    @map("cnpj")
  isActive   Boolean   @default(true) @map("is_active")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  employees      Employee[]
  // tenantSubscriptions TenantSubscription[]
  userTenants    UserTenant[]
  payrollBatches PayrollBatch[]
  payrolls       Payroll[]

  @@map("tenant")
}

model User {
  id             String    @id @default(uuid()) @map("id")
  userProviderId String?   @map("user_provider_id")
  name           String    @map("name")
  email          String    @unique @map("email")
  lastLoginAt    DateTime  @map("last_login_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")

  employees   Employee[]
  userTenants UserTenant[]

  @@map("user")
}

model UserTenant {
  tenantId      String        @map("tenant_id")
  userId        String        @map("user_id")
  accessProfile AccessProfile @map("access_profile")
  createdAt     DateTime?     @default(now()) @map("created_at")
  updatedAt     DateTime?     @updatedAt @map("updated_at")

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([tenantId, userId], name: "user_tenant_id")
  @@map("user_tenant")
}

model Employee {
  id        String    @id @default(uuid()) @map("id")
  tenantId  String    @map("tenant_id")
  userId    String    @map("user_id")
  fullName  String    @map("full_name")
  cpf       String    @map("cpf")
  email     String    @map("email")
  phone     String?   @map("phone")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  payrolls Payroll[]

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([cpf, tenantId, userId], name: "employee_cpf_tenant_user_unique")
  @@map("employee")
}

model PayrollBatch {
  id            String     @id @default(uuid()) @map("id")
  tenantId      String     @map("tenant_id")
  referenceDate String     @map("reference_date")
  batchType     BatchType? @map("batch_type")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime?  @updatedAt @map("updated_at")

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@map("payroll_batch")
}

model Payroll {
  id             String    @id @default(uuid()) @map("id")
  tenantId       String    @map("tenant_id")
  employeeId     String    @map("employee_id")
  fileKey        String?   @map("file_key")
  generationDate DateTime? @map("generation_date")
  enabledAt      DateTime? @map("enabled_at")
  readAt         DateTime? @map("read_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")

  tenant   Tenant   @relation(fields: [tenantId], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id])

  @@map("payroll")
}

// model Plan {
//   id                  String               @id @default(uuid()) @map("id")
//   name                String?              @map("name")
//   description         String?              @map("description")
//   price               Decimal?             @map("price")
//   recurrence          Recurrence           @map("recurrence")
//   employeeLimit       Int?                 @map("employee_limit")
//   isActive            Boolean?             @map("is_active")
//   createdAt           DateTime             @default(now()) @map("created_at")
//   updatedAt           DateTime?            @updatedAt @map("updated_at")
//   tenantSubscriptions TenantSubscription[]

//   @@map("plan")
// }

// model TenantSubscription {
//   id             String              @id @default(uuid()) @map("id")
//   tenantId       String              @map("tenant_id")
//   planId         String              @map("plan_id")
//   startDate      DateTime?           @map("start_date")
//   endDate        DateTime?           @map("end_date")
//   paymentStatus  SubscriptionStatus? @default(ACTIVE) @map("payment_status")
//   isActive       Boolean?            @default(true) @map("is_active")
//   createdAt      DateTime            @default(now()) @map("created_at")
//   updatedAt      DateTime?           @updatedAt @map("updated_at")
//   tenantPayments TenantPayment[]

//   tenant Tenant @relation(fields: [tenantId], references: [id])
//   plan   Plan   @relation(fields: [planId], references: [id])

//   @@map("tenant_subscription")
// }

// model TenantPayment {
//   id             String         @id @default(uuid()) @map("id")
//   subscriptionId String         @map("subscription_id")
//   paymentDate    DateTime       @map("payment_date")
//   amount         Decimal        @map("amount")
//   paymentMethod  PaymentMethod  @map("payment_method")
//   status         PaymentStatus? @map("status")
//   createdAt      DateTime       @default(now()) @map("created_at")
//   updatedAt      DateTime?      @updatedAt @map("updated_at")

//   tenantSubscription TenantSubscription @relation(fields: [subscriptionId], references: [id])

//   @@map("tenant_payment")
// }
